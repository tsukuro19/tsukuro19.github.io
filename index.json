[
{
	"uri": "//localhost:1313/1-amplify/",
	"title": "Initialize Amplify",
	"tags": [],
	"description": "",
	"content": "AWS Amplify is a comprehensive application development and deployment platform from AWS that helps developers build and deploy web and mobile applications quickly and easily. Here are the basic steps to deploy an application with AWS Amplify:\nDeploy with Amplify Sign in to your AWS account. In the search bar at the top of the page, type Amplify and select AMPLIFY from the list of services. The AWS Amplify Console is where you manage the entire deployment and management of your application. In the AWS Amplify interface, click the Create a new app button to start the process of creating a new app. On the Create a new app page, we select Deploy without Git to directly download the source code without connecting to a version control system like Git. This is a suitable deployment method when we already have the source code and do not need source code control or CI/CD processes. Configure the application and deploy: Name the application: In this step, we need to name our application. Here, we can name it \u0026ldquo;MathOfMath\u0026rdquo;. Name the branch: Next, name the branch that we will deploy to, for example \u0026ldquo;main\u0026rdquo; or \u0026ldquo;dev\u0026rdquo;, Then select the Drag and Drop method to push our source code. Upload the zip file: Next, we need to upload the zip file containing the entire application source code. AWS Amplify will then automatically unzip and process the files needed to deploy the application. In index.zip is an index.html file with the following content \u0026lt;!DOCTYPE html\u0026gt; h1 {\rcolor: #FFFFFF;\rfont-size: 2em;\r}\rlabel {\rdisplay: block;\rcolor: #86C232;\rfont-size: 1.25em;\rmargin: 10px 0 5px;\r}\rinput {\rcolor: #222629;\rbackground-color: #FFFFFF;\rfont-size: 1.25em;\rpadding: 5px;\rwidth: calc(100% - 20px);\rmax-width: 300px;\rmargin-bottom: 15px;\r}\rbutton {\rbackground-color: #86C232;\rborder: 2px solid #86C232;\rcolor: #FFFFFF;\rfont-size: 1.25em;\rfont-weight: bold;\rpadding: 10px 20px;\rcursor: pointer;\rtransition: background-color 0.3s ease;\r}\rbutton:hover {\rbackground-color: #6e9f28;\r}\r\u0026lt;/style\u0026gt;\r\u0026lt;script\u0026gt;\rfunction callAPI(base, exponent) {\rconst headers = new Headers();\rheaders.append(\u0026quot;Content-Type\u0026quot;, \u0026quot;application/json\u0026quot;);\rconst body = JSON.stringify({ base, exponent });\r// create a JSON object with parameters for the API call\rconst requestOptions = {\rmethod: 'POST',\rheaders: headers,\rbody: body,\rredirect: 'follow'\r};\r// make the API call and handle the response\rfetch(\u0026quot;API-GATEWAY\u0026quot;, requestOptions)\r.then(response =\u0026gt; response.json())\r.then(result =\u0026gt; alert(result.body))\r.catch(error =\u0026gt; console.error('Error:', error));\r}\r\u0026lt;/script\u0026gt;\r\u0026lt;label for=\u0026quot;exponent\u0026quot;\u0026gt;...to the power of:\u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026quot;number\u0026quot; id=\u0026quot;exponent\u0026quot; name=\u0026quot;exponent\u0026quot; required\u0026gt;\r\u0026lt;button type=\u0026quot;submit\u0026quot;\u0026gt;CALCULATE\u0026lt;/button\u0026gt;\r\u0026lt;/form\u0026gt;\rIn index.html, fetch API GATEWAY will be the private api key to communicate with API Gateway to perform Restful API, so when you have finished creating API Gateway, you can go back and fill in your api key.\nOnce done, click the Save and Deploy button to start the deployment process. AWS Amplify will automatically process and deploy the application to the AWS infrastructure. After successful deployment, we will have the product domain put on the internet environment. Access the domain to confirm that the domain has run successfully "
},
{
	"uri": "//localhost:1313/4-dynamodb/1-createdb/",
	"title": "Create DynamoDB",
	"tags": [],
	"description": "",
	"content": "How to create and configure DynamoDB Table on AWS Access DynamoDB: In the left sidebar of the AWS Management Console, find and select DynamoDB. Once on the DynamoDB page, click Create Table to begin the process of creating a new table. Create Table: On the Create Table page, enter the Table Name you want to create. For example, you can name it PowerOfMathDB. Name the Partition key ID. This will be the primary key to identify the items in the table. Configure the table: Scroll down and select Default Settings if you want to use the default settings. Once selected, click the Create Table button to create the table. "
},
{
	"uri": "//localhost:1313/",
	"title": "Implementing a Power of Two Math Function with AWS Lambda",
	"tags": [],
	"description": "",
	"content": "Deploy a Power of Two Web App Using AWS Lambda Overview In this lab, we will deploy an application using AWS Amplify to manage the entire process of deploying and hosting a web application, and use other serverless services such as IAM (Identity and Access Management), Lambda, API Gateway, and DynamoDB to build and secure the backend for the application.\nBefore we begin, make sure you are familiar with deploying basic services on AWS. The documentation and tutorials on how to deploy applications with AWS services will be helpful to understand the overall process.\nArchitectural Overview AWS Amplify AWS Amplify is a service platform that makes it easy to develop, deploy, and manage web or mobile applications. Amplify provides a powerful set of tools that allow you to quickly build both the frontend and backend of your application. With Amplify, you can easily integrate with AWS services such as API Gateway, Lambda, and DynamoDB to build the backend of your application.\nIAM (Identity and Access Management) IAM (Identity and Access Management) is an AWS service that allows you to securely control access to your AWS resources. With IAM, you can create users, user groups, and assign specific permissions to control who can perform what actions in your AWS account. This is important for protecting sensitive resources, especially when you deploy applications with Lambda, API Gateway, and DynamoDB.\nAWS Lambda AWS Lambda is a serverless computing service that lets you run code without having to set up or manage servers. Lambda automatically scales your application based on traffic and charges only for the time your code is running. In this lab, Lambda will be used to handle the server-side logic for the application, with requests triggered via API Gateway and data stored in DynamoDB.\nAPI Gateway API Gateway is an AWS service that helps us create, deploy, and manage RESTful APIs securely and efficiently. API Gateway acts as a \u0026ldquo;door\u0026rdquo; that allows our frontend applications to communicate with backend functions executed in Lambda or DynamoDB. API Gateway also supports features like security, traffic control, and API monitoring.\nDynamoDB Amazon DynamoDB is a fully managed NoSQL database service that provides low-latency, high-performance data storage and retrieval. In this lab, DynamoDB is used to store the data of the application we deploy on Amplify, with data interactions performed via Lambda functions and API Gateway.\nMain Content Initialize Amplify Initialize Lambda Initialize API Gateway Initialize DynamoDB Cleanup Resources "
},
{
	"uri": "//localhost:1313/4-dynamodb/2-permission/",
	"title": "Create Permission",
	"tags": [],
	"description": "",
	"content": "DynamoDB Integration with AWS Lambda and IAM Policy Configuration 1. Get the Amazon Resource Name (ARN) of the DynamoDB Table:\nAfter the DynamoDB table is successfully initialized, go to the DynamoDB Table page. Select the newly created table (e.g. PowerOfMathDatabase). Click Additional Info to view additional information, including the Amazon Resource Name (ARN). Copy this ARN for use in the next steps. 2. Configure IAM access for Lambda:\nReturn to the AWS Lambda page. In the Configuration section, scroll down and select Permissions. Click Role name to open the IAM page associated with this role. 3. Create Inline Policy for IAM Role:\nOn the IAM page that just opened, select the Permissions tab. Click Add permissions and select Create inline policy. Switch to the JSON tab in the Create policy section. Paste the following JSON code into the Policy editor: "
},
{
	"uri": "//localhost:1313/3-api-gateway/1-create-and-deploy/",
	"title": "Create and Deploy API Gateway",
	"tags": [],
	"description": "",
	"content": " Access API Gateway:\nOn the left sidebar of the AWS Management Console interface, find and select API Gateway. On the API Gateway page, scroll down and find REST API, then click the Build button to get started. Create a new REST API:\nIn the Create REST API page, select New API to create a new API. Name your API, for example: PowerOfMathAPI. After naming, click the Create API button to complete the API creation step. Create Resource and Method for API:\nOn the newly created API Gateway page, on the left sidebar, click Resources. In the Resources section, select \u0026ldquo;/\u0026rdquo; (root resource), then click Create Method. On the Create Method page, select the method type as POST. In the Integration type, select Lambda function. In the Lambda Function section, select the region (region) as us-east-1 (or the region where you created the Lambda function previously) and select the Lambda function. Click Create Method. Configure CORS for API:\nGo back to API Gateway page, in Resources section, select \u0026ldquo;/\u0026rdquo; (root resource) again. Click Enable CORS button to enable CORS (Cross-Origin Resource Sharing). In Enable CORS page, select POST method and then click Save to save the configuration. Deploy API:\nGo back to the API Gateway page, select Deploy API. Choose new stage In the Stage name section, enter the name of the stage you want, for example: dev. Click the Deploy button to deploy the API. Get the URL of the deployed API:\nAfter deploying, go to the Stages section in API Gateway. Here, you will see the stage name you just created, click on it. In the Invoke URL section, copy the URL of the API to use for the html file. "
},
{
	"uri": "//localhost:1313/2-lambda/",
	"title": "Initialize Lambda",
	"tags": [],
	"description": "",
	"content": "AWS Lambda is a serverless computing service from Amazon Web Services (AWS) that lets you run code without managing servers. Lambda scales automatically and charges only based on the time your code is running, making it ideal for many automation and data processing tasks.\nCreate and deploy AWS Lambda Function In the search bar at the top, type \u0026ldquo;Lambda\u0026rdquo;. Select Lambda from the list of services to open the AWS Lambda Console. In the AWS Lambda Console, click the Create function button to begin the process of creating a new function. This is where you will define the basic information for your Lambda function. Configure the Lambda function: On the Create function page, select Author from scratch to start from scratch.\nName the function: Enter a name for your Lambda function, such as \u0026ldquo;PowerOfMathFunction\u0026rdquo;.\nSelect runtime: Select the runtime version your code will run on, such as Python 3.11.\nSelect architecture: Select the appropriate architecture, such as x86_64. After completing the above steps, click Create function to create the function. Write and deploy code: After the function is successfully created, you will be redirected to the function\u0026rsquo;s configuration page. In the Code source section, enter the Python code below and then deploy the function Code: # import the JSON utility package import json # import the Python math library import math # define the handler function that the Lambda service will use an entry point def lambda_handler(event, context): # extract the two numbers from the Lambda service\u0026#39;s event object mathResult = math.pow(int(event[\u0026#39;base\u0026#39;]), int(event[\u0026#39;exponent\u0026#39;])) # return a properly formatted JSON object return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(\u0026#39;Your result is \u0026#39; + str(mathResult)) } Configure and run the test: After deployment, click Test to configure and run the test. Select Create a new test event, name the event, for example \u0026ldquo;PowerOfMathTestEvent\u0026rdquo;. Configure parameters: For the above code, you need to provide two parameters in JSON as shown in the figure and click create to save the test event Code: { \u0026#34;base\u0026#34;: 2, \u0026#34;exponent\u0026#34;:3 } Click Test to run the function with the configured parameters and check the results. "
},
{
	"uri": "//localhost:1313/3-api-gateway/2-test-api/",
	"title": "Test API Gateway",
	"tags": [],
	"description": "",
	"content": "How to test API on API Gateway Test the newly created API: On the API Gateway page, in the Resources section, select the API you want to test. Click Test to open the API testing interface. Perform API testing: In the Request Body section, enter the parameters you want to test. For example, if your API requires parameters like base and exponent, you can enter: Code: { \u0026#34;base\u0026#34;: 3, \u0026#34;exponent\u0026#34;: 4 } After entering the parameters, scroll down to the bottom of the page and click the Test button to perform the test. View the test results: After running the test, you will see the results displayed including the status code and response body. If the API is working properly, the status code will be 200. If there is an error, the status code will be different and there will be detailed information about the error in the response body. "
},
{
	"uri": "//localhost:1313/4-dynamodb/3-dynamodb-test/",
	"title": "Test Lambda with DynamoDb",
	"tags": [],
	"description": "",
	"content": "Complete the integration and test the results with AWS Lambda and DynamoDB 1. Update the code for AWS Lambda:\nGo back to the AWS Lambda page. Select the Code section in the Lambda console. Enter the code needed to interact with DynamoDB. # import the AWS SDK (for Python the package name is boto3) import boto3 # import two packages to help us with dates and date formatting from time import gmtime, strftime # create a DynamoDB object using the AWS SDK dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) # use the DynamoDB object to select our table table = dynamodb.Table(\u0026#39;PowerOfMathDatabase\u0026#39;) # store the current time in a human readable format in a variable now = strftime(\u0026#34;%a, %d %b %Y %H:%M:%S +0000\u0026#34;, gmtime()) # define the handler function that the Lambda service will use an entry point def lambda_handler(event, context): # extract the two numbers from the Lambda service\u0026#39;s event object mathResult = math.pow(int(event[\u0026#39;base\u0026#39;]), int(event[\u0026#39;exponent\u0026#39;])) # write result and time to the DynamoDB table using the object we instantiated and save response in a variable response = table.put_item( Item={ \u0026#39;ID\u0026#39;: str(mathResult), \u0026#39;LatestGreetingTime\u0026#39;:now }) # return a properly formatted JSON object return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(\u0026#39;Your result is \u0026#39; + str(mathResult)) } 2. Deploy the code and test the Lambda function:\nAfter entering the code, click Deploy to deploy the code to the Lambda function.\nThen, click the Test button to test the Lambda function\u0026rsquo;s operation.\nIf the test is successful, you will see status code 200, signaling that the Lambda function has performed its function correctly.\n3. Check the data in DynamoDB:\nGo back to the DynamoDB page.\nSelect the database table you used (e.g. PowerOfMathDatabase).\nClick Explore items to see the items stored in the table. You will see the results that the Lambda function returned via API Gateway in the previous steps. Application also using function successfully "
},
{
	"uri": "//localhost:1313/3-api-gateway/",
	"title": "Initialize API Gateway",
	"tags": [],
	"description": "",
	"content": "About API Gateway API Gateway is a fully managed service from AWS that makes it easy to create, deploy, manage, and secure RESTful, WebSocket, and HTTP APIs. With API Gateway, you can create APIs that communicate between your frontend applications and backend services like AWS Lambda, DynamoDB, or other systems.\nWhy use API Gateway? Easy API Management and Security: API Gateway provides robust security features such as API Key management, user authentication via Amazon Cognito or IAM services, and protection against DDoS attacks. This helps ensure that only authorized users can access your API. Easy Integration with Other AWS Services: API Gateway integrates tightly with other AWS services such as Lambda, DynamoDB, and S3, making it easy for you to build complex backend systems without having to worry about infrastructure management. Automatic Scaling and Load Management: API Gateway can automatically scale to handle large volumes of requests from users without requiring manual intervention from you. This is especially useful when your application needs to serve a large number of users in a short period of time. Support multiple API types: With API Gateway, you can build multiple API types, including RESTful API, WebSocket API, and HTTP API, suitable for a wide range of applications from traditional web applications to real-time applications such as live chat. API Lifecycle Management: API Gateway provides tools for you to easily manage the lifecycle of your API, including controlling API versions, deploying APIs to different environments (such as development, testing, and production), and monitoring API performance through built-in monitoring tools. Summary API Gateway is a powerful and flexible tool that helps you build APIs easily, securely, and scalably. It not only helps you manage APIs, but also optimizes the performance of your backend system, meeting the needs of today\u0026rsquo;s modern applications.\n"
},
{
	"uri": "//localhost:1313/4-dynamodb/",
	"title": "Initialize DynamoDB",
	"tags": [],
	"description": "",
	"content": "About Amazon DynamoDB Amazon DynamoDB is a fully managed NoSQL database service provided by AWS. Designed for high-performance, low-latency workloads, DynamoDB is ideal for applications that require high performance and elastic scalability. DynamoDB supports fast data storage and retrieval, with the ability to automatically scale to meet changing application needs.\nWhy DynamoDB? High Performance and Low Latency: DynamoDB is optimized for high performance with sub-10 millisecond latency. This is critical for applications that require fast response times, such as real-time applications, e-commerce systems, and online gaming services. Automatic Scalability: DynamoDB is an automatic scalable service that scales to meet growing data and traffic demands without requiring administrator intervention. This allows your application to scale from a few requests per second to millions of requests per second without experiencing performance issues. High Reliability and Availability: DynamoDB stores your data across multiple Availability Zones within a region, ensuring that your data is always available and secure even if one or more Availability Zones fail. This protects your data from loss and ensures that your application is always up and running. No Infrastructure Management: Since DynamoDB is a fully managed service, you don\u0026rsquo;t need to worry about installing, configuring, maintaining, or updating hardware or software. This saves you time and resources, allowing you to focus more on developing your application. Strong security and access control features: DynamoDB integrates with AWS Identity and Access Management (IAM), giving you granular control over access to your data. You can use IAM policies to define who can access your DynamoDB tables and what actions they can perform. Support for flexible data models: DynamoDB supports flexible data storage with tables that do not have a fixed structure. You can add or remove object attributes without changing the structure of the table, which is useful when you need to develop and scale your application quickly. Easy Integration with Other AWS Services: DynamoDB integrates well with many other AWS services such as AWS Lambda, API Gateway, and S3, making it easy to build serverless applications or complex systems. Summary Amazon DynamoDB is an excellent choice for applications that require a database with high performance, scalability, and absolute reliability. With no infrastructure to manage and strong integration with other AWS services, DynamoDB allows you to build modern, production-ready applications without worrying about complex database administration.\n"
},
{
	"uri": "//localhost:1313/5-clean-resource/",
	"title": "Clean resource",
	"tags": [],
	"description": "",
	"content": "Clean resource Clean up AWS Lambda resources: Clean up AWS Amplify resources: Clean up AWS API Gateway resources: Clean up Amazon DynamoDB resources: "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]